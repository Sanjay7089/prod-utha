# Refined Bedrock Knowledge Base CF Stack
Description: >
  Create a Bedrock Knowledge Base and associated OpenSearch Serverless collection.

Parameters:
  pKnowledgeBaseBucketName:
    Description: S3 bucket name for KB content
    Type: String
  pInputDocumentUploadFolderPrefix:
    Type: String
  pEmbedModel:
    Type: String
    AllowedValues:
      - amazon.titan-embed-text-v2:0
      - amazon.titan-embed-text-v1
      - cohere.embed-english-v3
      - cohere.embed-multilingual-v3
    Default: amazon.titan-embed-text-v2:0
  pIndexName:
    Type: String
    Default: bedrock-knowledge-base-default-index
    AllowedPattern: ^[a-z0-9](-*[a-z0-9])*
  pArtifactsBucket:
    Type: String
    Description: S3 bucket where CloudFormation Lambda artifact zips are stored

Conditions:
  HasInputDocumentUploadFolderPrefix:
    Fn::Not:
      - Fn::Equals:
          - ''
          - Ref: pInputDocumentUploadFolderPrefix

Mappings:
  S3Path:
    OpenSearchPyLayerMapping:
      Name: 'opensearch/opensearchpy-layer.zip'
    OpenSearchInitLambdaMapping:
      Name: 'opensearch/custom-resource-lambda.zip'

Resources:
  #
  # OpenSearch Serverless Collection
  #
  OSSCollection:
    Type: 'AWS::OpenSearchServerless::Collection'
    Properties:
      Name: !Sub
       - 'kb-collection-${ID}'
       - ID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref "AWS::StackId"]]]]
      Type: VECTORSEARCH
      Description: Bedrock Knowledge Base collection
    DependsOn: OSSEncryptionPolicy

  #
  # OpenSearch Serverless resources
  #
  OSSEncryptionPolicy:
    Type: 'AWS::OpenSearchServerless::SecurityPolicy'
    Properties:
      Name: !Sub
       - 'encryption-policy-${ID}'
       - ID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref "AWS::StackId"]]]]
      Type: encryption
      Description: Encryption policy for Bedrock Knowledge Base collection
      Policy: !Sub
       - '{"Rules":[{"ResourceType":"collection","Resource":["collection/${CollName}"]}],"AWSOwnedKey":true}'
       - CollName: !Sub
         - 'kb-collection-${ID}'
         - ID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref "AWS::StackId"]]]]

  OSSNetworkPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    DependsOn:
    - OSSEncryptionPolicy
    Properties:
      Name: !Sub
       - 'network-policy-${ID}'
       - ID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref "AWS::StackId"]]]]
      Type: network
      Policy: !Sub
       - '[{"Description": "Public access for Bedrock Knowledge Base collection",
          "Rules": [{"ResourceType": "dashboard", "Resource": ["collection/${CollName}"]},
          {"ResourceType": "collection", "Resource": ["collection/${CollName}"]}],
          "AllowFromPublic": true}]'
       - CollName: !Sub
         - 'kb-collection-${ID}'
         - ID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref "AWS::StackId"]]]]

  OSSDataAccessPolicy:
    Type: AWS::OpenSearchServerless::AccessPolicy
    DependsOn:
    - OSSNetworkPolicy
    Properties:
      Name: !Sub
       - 'data-policy-${ID}'
       - ID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref "AWS::StackId"]]]]
      Type: data
      Policy: !Sub
       - '[{"Rules": [{"Resource": ["collection/${CollName}"], "Permission":
          ["aoss:CreateCollectionItems", "aoss:UpdateCollectionItems", "aoss:DescribeCollectionItems"],
          "ResourceType": "collection"}, {"ResourceType": "index", "Resource": ["index/${CollName}/*"],
          "Permission": ["aoss:CreateIndex", "aoss:DescribeIndex", "aoss:ReadDocument",
          "aoss:WriteDocument", "aoss:UpdateIndex", "aoss:DeleteIndex"]}], 
          "Principal": ["arn:aws:iam::${AWS::AccountId}:role/${KnowledgeBaseServiceRole}"]}]'
       - CollName: !Sub
         - 'kb-collection-${ID}'
         - ID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref "AWS::StackId"]]]]
    #
  # Custom resource code to initialize OpenSearch Serverless index
  #
  OpenSearchPyLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub
       - 'lambda-layer-${ID}'
       - ID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref "AWS::StackId"]]]]
      CompatibleRuntimes:
      - python3.8
      - python3.9
      - python3.10
      - python3.11
      Content:
        # S3Bucket: !FindInMap [BucketName, !Ref "AWS::Region", 'Name']
        S3Bucket: !Ref pArtifactsBucket
        S3Key: !FindInMap [S3Path, 'OpenSearchPyLayerMapping', 'Name']
      Description: opensearchpy layer including requests, requests-aws4auth, and boto3-1.34.82
      LicenseInfo: Apache-2.0

  OpenSearchLambdaExecutionRole:
    Type: AWS::IAM::Role
    DependsOn:
    - OpenSearchPyLayer
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: OSSLambdaRoleDefaultPolicy 
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
            Resource: '*'                      # no resource specification applicable
      - PolicyName: AllowLambdaLogs 
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: AllowS3 
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - s3:PutObject*
            - s3:GetObject*
            - s3:DeleteObject*
            Resource:
              Fn::Sub: arn:aws:s3:::*
      - PolicyName: AOSSPermissionsPart1 
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - aoss:BatchGetCollection
            - aoss:CreateSecurityPolicy
            - aoss:CreateAccessPolicy
            - aoss:UpdateAccessPolicy
            - aoss:ListCollections
            - aoss:GetAccessPolicy
            - aoss:ListCollections
            - aoss:CreateCollection
            - bedrock:StartIngestionJob # for data ingestion
            Resource: '*'                      # no resource specification applicable
      - PolicyName: AOSSPermissionsPart2
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - aoss:DeleteCollection
            - aoss:UpdateCollection
            - aoss:APIAccessAll
            Resource:
              Fn::Sub: arn:aws:aoss:${AWS::Region}:${AWS::AccountId}:collection/*
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: Specified permissions do not appy to specific resources

  CreateOSSIndexLambdaFunction:
    Type: AWS::Lambda::Function
    DependsOn:
    - OpenSearchLambdaExecutionRole
    Properties:
      FunctionName: !Sub 
       - 'opensearch-setup-${ID}'
       - ID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref "AWS::StackId"]]]]
      Handler: oss_handler.lambda_handler
      MemorySize: 1024
      Role:
        Fn::GetAtt:
        - OpenSearchLambdaExecutionRole
        - Arn
      Runtime: python3.11
      Timeout: 840
      Code:
        # S3Bucket: !FindInMap [BucketName, !Ref "AWS::Region", 'Name']
        S3Bucket: !Ref pArtifactsBucket
        S3Key: !FindInMap [S3Path, 'OpenSearchInitLambdaMapping', 'Name']
      Layers:
      - Ref: OpenSearchPyLayer
      - !Sub arn:aws:lambda:${AWS::Region}:017000801446:layer:AWSLambdaPowertoolsPythonV2:68
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: InfraSetupLambda
          POWERTOOLS_METRICS_NAMESPACE: InfraSetupLambda-NameSpace
          POWERTOOLS_LOG_LEVEL: INFO
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: Customer can use VPC if desired
          - id: W92 
            reason: One-time use Lambda for CloudFormation custom resource, no reserved concurrency needed
      checkov:
        skip:
          - id: CKV_AWS_117
            comment: Customer can use VPC if desired
          - id: CKV_AWS_116
            comment: One-time use Lambda for CloudFormation custom resource, no DLQ needed
          - id: CKV_AWS_115
            comment: One-time use Lambda for CloudFormation custom resource, no reserved concurrency needed
          - id: CKV_AWS_173
            comment: No sensitive data in environment variables

  
  InvokeCreateOSSIndexLambdaFunction:
    Type: Custom::InvokeCreateOSSIndexLambdaFunction
    DependsOn:
    - CreateOSSIndexLambdaFunction
    - OSSDataAccessPolicy
    Version: '1.0'
    Properties:
      ServiceToken: !GetAtt CreateOSSIndexLambdaFunction.Arn
      collection_endpoint: !GetAtt OSSCollection.CollectionEndpoint
      data_access_policy_name: !Sub
       - 'data-policy-${ID}'
       - ID: !Select [4, !Split ['-', !Select [2, !Split ['/', !Ref "AWS::StackId"]]]]
      index_name:
        Ref: pIndexName
      embedding_model_id:
        Ref: pEmbedModel

  # Enhanced execution role for sync lambda with Bedrock permissions
  SyncLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: AllowLambdaLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: AllowBedrockAgent
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - bedrock-agent:StartIngestionJob
            - bedrock-agent:GetKnowledgeBase
            - bedrock-agent:ListDataSources
            Resource: '*'

  KnowledgeBaseServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Sub ${AWS::AccountId}
              ArnLike:
                aws:SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/*
      Policies:
        - PolicyName: bedrock-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - aoss:APIAccessAll
                  - s3:GetObject
                  - s3:ListBucket
                Resource: '*'

  KnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    DependsOn: InvokeCreateOSSIndexLambdaFunction
    Properties:
      Description: Bedrock Knowledge Base
      Name: !Sub 'knowledge-base-${AWS::StackName}'
      RoleArn: !GetAtt KnowledgeBaseServiceRole.Arn
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/${pEmbedModel}
      StorageConfiguration:
        Type: OPENSEARCH_SERVERLESS
        OpensearchServerlessConfiguration:
          CollectionArn: !GetAtt OSSCollection.Arn
          FieldMapping:
            MetadataField: AMAZON_BEDROCK_METADATA
            TextField: AMAZON_BEDROCK_TEXT_CHUNK
            VectorField: bedrock-knowledge-base-default-vector
          VectorIndexName: !Ref pIndexName

  KnowledgeBaseDataSource:
    Type: AWS::Bedrock::DataSource
    DependsOn: KnowledgeBase
    Properties:
      Name: !Sub kb-ds-${AWS::StackName}
      Description: KB data from S3
      KnowledgeBaseId: !Ref KnowledgeBase
      DataSourceConfiguration:
        Type: S3
        S3Configuration:
          BucketArn: !Sub arn:aws:s3:::${pKnowledgeBaseBucketName}
          InclusionPrefixes:
            Fn::If:
              - HasInputDocumentUploadFolderPrefix
              - Ref: pInputDocumentUploadFolderPrefix
              - Ref: AWS::NoValue
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: FIXED_SIZE
          FixedSizeChunkingConfiguration:
            MaxTokens: 300
            OverlapPercentage: 20

  
Outputs:
  KnowledgeBaseID:
    Value: !Ref KnowledgeBase
  OpenSearchCollection:
    Value: !Ref OSSCollection
  SyncLambda:
    Value: !Ref SyncS3InlineLambda
  DataSourceID:
    Value: !Ref KnowledgeBaseDataSource